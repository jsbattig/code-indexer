[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "code-indexer"
dynamic = ["version"]
description = "AI-powered semantic code search with local models"
authors = [
    {name = "Seba Battig", email = "jsbattig@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["ai", "code-search", "semantic-search", "ollama", "qdrant"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Topic :: Text Processing :: Indexing",
]

dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "docker>=6.0.0",
    "pyyaml>=6.0",
    "pathspec>=0.11.0",
    "watchdog>=3.0.0",
    "jsonschema>=4.0.0",
    "tree-sitter-language-pack==0.9.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "psutil>=5.9.0",
    "PyJWT>=2.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "types-PyYAML>=6.0.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/jsbattig/code-indexer"
Repository = "https://github.com/jsbattig/code-indexer"
Issues = "https://github.com/jsbattig/code-indexer/issues"

[project.scripts]
code-indexer = "code_indexer.cli:main"
cidx = "code_indexer.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/code_indexer"]
include = [
    "src/code_indexer/docker/*"
]
exclude = [
    "dist/docker-compose.yml"
]

[tool.hatch.version]
path = "src/code_indexer/__init__.py"

[tool.black]
line-length = 88
target-version = ["py39"]

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
no_site_packages = true

[[tool.mypy.overrides]]
module = "pydantic.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "pydantic._internal.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v"
filterwarnings = [
    "ignore:The `__fields__` attribute is deprecated.*:DeprecationWarning",
]
markers = [
    "e2e: End-to-end tests",
    "voyage_ai: Tests requiring VoyageAI API key",
    "ollama: Tests requiring Ollama service",
    "qdrant: Tests requiring Qdrant service",
    "real_api: Tests that make real API calls",
    "slow: Tests that take longer to run",
    "integration: Integration tests requiring multiple services",
    "unit: Unit tests with mocked dependencies",
    "full_automation: Tests that should only be run in full automation pipeline",
]

[tool.coverage.run]
source = ["src/code_indexer"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]