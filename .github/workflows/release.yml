name: Release

on:
  release:
    types: [published]

jobs:
  publish-pypi:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-github-release:
    runs-on: ubuntu-latest
    needs: [publish-pypi, publish-docker]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest two tags
        CURRENT_TAG=$(git describe --tags --abbrev=0)
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Changes since $PREVIOUS_TAG:" > CHANGELOG.md
          git log --oneline ${PREVIOUS_TAG}..${CURRENT_TAG} >> CHANGELOG.md
        else
          echo "Initial release" > CHANGELOG.md
          git log --oneline >> CHANGELOG.md
        fi
        
        # Set output for GitHub release
        {
          echo 'CHANGELOG<<EOF'
          cat CHANGELOG.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: Update release with changelog
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const tag = context.ref.replace('refs/tags/', '');
          
          // Get the release by tag
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner,
            repo,
            tag
          });
          
          // Update the release with changelog
          await github.rest.repos.updateRelease({
            owner,
            repo,
            release_id: release.id,
            body: `${{ steps.changelog.outputs.CHANGELOG }}`
          });