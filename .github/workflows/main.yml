name: CI/CD with Auto Release

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with ruff
      run: |
        ruff check src/ tests/
    
    - name: Check formatting with black
      run: |
        black --check src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Run unit tests only (no E2E/integration tests)
      run: |
        # Run only unit tests from the organized test structure
        # Using new directory structure: tests/unit/ contains all unit tests
        # Excludes tests/integration/ and tests/e2e/ directories automatically
        python3 -m pytest \
          tests/unit/ \
          --ignore=tests/unit/server/ \
          --ignore=tests/unit/infrastructure/ \
          --ignore=tests/unit/api_clients/ \
          --ignore=tests/unit/remote/ \
          --ignore=tests/unit/cancellation/ \
          --ignore=tests/unit/api_clients/test_base_cidx_remote_api_client_real.py \
          --ignore=tests/unit/api_clients/test_remote_query_client_real.py \
          --ignore=tests/unit/api_clients/test_business_logic_integration_real.py \
          --ignore=tests/unit/api_clients/test_repository_linking_client_real.py \
          --ignore=tests/unit/api_clients/test_jwt_token_manager_real.py \
          --ignore=tests/unit/api_clients/test_real_api_integration_required.py \
          --ignore=tests/unit/api_clients/test_messi_rule2_compliance.py \
          --ignore=tests/unit/api_clients/test_admin_api_client.py \
          --ignore=tests/unit/api_clients/test_admin_client_golden_repos_maintenance.py \
          --ignore=tests/unit/api_clients/test_jobs_cancel_status_real_integration.py \
          --ignore=tests/unit/api_clients/test_base_cidx_remote_api_client.py \
          --ignore=tests/unit/api_clients/test_jobs_api_client_tdd.py \
          --ignore=tests/unit/api_clients/test_isolation_utils.py \
          --ignore=tests/unit/api_clients/test_jobs_api_client_cancel_tdd.py \
          --ignore=tests/unit/api_clients/test_remote_query_client.py \
          --ignore=tests/unit/api_clients/test_repos_client_tdd.py \
          --ignore=tests/unit/cli/test_admin_commands.py \
          --ignore=tests/unit/cli/test_explicit_authentication_commands.py \
          --ignore=tests/unit/cli/test_jobs_cli_e2e_tdd.py \
          --ignore=tests/unit/cli/test_password_security_validation.py \
          --ignore=tests/unit/cli/test_server_lifecycle_commands.py \
          --ignore=tests/unit/cli/test_sync_command_structure.py \
          --ignore=tests/unit/cli/test_cli_init_segment_size.py \
          --ignore=tests/unit/cli/test_query_functionality_fix.py \
          --ignore=tests/unit/cli/test_cli_issues_tdd_fix.py \
          --ignore=tests/unit/cli/test_cli_response_parsing_errors.py \
          --ignore=tests/unit/cli/test_cli_error_propagation_fixes.py \
          --ignore=tests/unit/cli/test_jobs_cancel_status_command_tdd.py \
          --ignore=tests/unit/cli/test_jobs_command_tdd.py \
          --ignore=tests/unit/cli/test_repos_commands_tdd.py \
          --ignore=tests/unit/cli/test_repository_activation_lifecycle.py \
          --ignore=tests/unit/cli/test_repository_branch_switching.py \
          --ignore=tests/unit/cli/test_repository_info_command.py \
          --ignore=tests/unit/cli/test_resource_cleanup_verification.py \
          --ignore=tests/unit/cli/test_authentication_status_management.py \
          --ignore=tests/unit/cli/test_admin_repos_integration_validation.py \
          --ignore=tests/unit/config/test_fix_config_port_bug_specific.py \
          --ignore=tests/unit/integration/ \
          --ignore=tests/unit/services/test_clean_file_chunking_manager.py \
          --ignore=tests/unit/services/test_file_chunking_manager.py \
          --ignore=tests/unit/services/test_file_chunk_batching_optimization.py \
          --ignore=tests/unit/services/test_voyage_threadpool_elimination.py \
          --ignore=tests/unit/services/test_claude_md_compliance_violations_cleanup.py \
          --ignore=tests/unit/services/test_claude_md_final_compliance.py \
          --ignore=tests/unit/services/test_complete_claude_md_violations_elimination.py \
          --ignore=tests/unit/cli/test_admin_repos_functionality_verification.py \
          --ignore=tests/unit/cli/test_admin_repos_maintenance_commands.py \
          --ignore=tests/unit/cli/test_admin_repos_add_simple.py \
          --ignore=tests/unit/cli/test_admin_repos_delete_command.py \
          --ignore=tests/unit/cli/test_admin_repos_delete_integration_e2e.py \
          --ignore=tests/unit/cli/test_password_management_commands.py \
          --ignore=tests/unit/cli/test_admin_password_change_command.py \
          --ignore=tests/unit/cli/test_repos_list_fix_verification.py \
          --ignore=tests/unit/cli/test_system_health_commands.py \
          --ignore=tests/unit/cli/test_staleness_display_integration.py \
          --ignore=tests/unit/cli/test_critical_cli_fixes_elite_tdd.py \
          --ignore=tests/unit/cli/test_disabled_command_handling.py \
          --ignore=tests/unit/cli/test_disabled_command_integration.py \
          --ignore=tests/unit/cli/test_fix_verification.py \
          --ignore=tests/unit/cli/test_improved_remote_query_experience.py \
          --ignore=tests/unit/cli/test_install_server_command.py \
          --ignore=tests/unit/cli/test_story1_deprecated_options_cleanup.py \
          --ignore=tests/unit/cli/test_story4_cli_cleanup.py \
          --ignore=tests/unit/cli/test_cli_rebuild_indexes.py \
          --ignore=tests/unit/cli/test_cli_status_payload_indexes.py \
          --ignore=tests/unit/cli/test_command_routing.py \
          --ignore=tests/unit/remote/ \
          --ignore=tests/unit/services/test_rag_first_claude_service_bug.py \
          --ignore=tests/unit/api_clients/test_api_compatibility_elite.py \
          --ignore=tests/unit/api_clients/test_api_compatibility_failures.py \
          --ignore=tests/unit/api_clients/test_api_compatibility_fixes_verification.py \
          --ignore=tests/unit/api_clients/test_auth_client_methods_basic.py \
          --ignore=tests/unit/api_clients/test_auth_client_password_management.py \
          --ignore=tests/unit/api_clients/test_business_logic_fixture_failures.py \
          --ignore=tests/unit/api_clients/test_complete_api_compatibility_solution.py \
          --ignore=tests/unit/api_clients/test_remote_query_client_fixed.py \
          --ignore=tests/unit/api_clients/test_repos_client_activation_lifecycle.py \
          --ignore=tests/unit/cancellation/test_enhanced_cancellation_system.py \
          --ignore=tests/unit/cli/test_adapted_command_behavior.py \
          --ignore=tests/unit/cli/test_admin_repos_list_debug.py \
          --ignore=tests/unit/cli/test_cli_help_text_validation.py \
          --ignore=tests/unit/cli/test_remote_config_format_mismatch_fix.py \
          -m "not slow and not e2e and not real_api and not integration and not requires_server and not requires_containers" \
          --cov=src/code_indexer --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  check-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      current-version: ${{ steps.version-check.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for comparison
    
    - name: Get current version
      id: current-version
      run: |
        VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from code_indexer import __version__; print(__version__)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Check if version file changed
      id: version-file-check
      run: |
        # Check if __init__.py was modified in this commit
        if git diff --name-only HEAD~1 HEAD | grep -q "src/code_indexer/__init__.py"; then
          echo "version-file-changed=true" >> $GITHUB_OUTPUT
          echo "Version file was modified in this commit"
        else
          echo "version-file-changed=false" >> $GITHUB_OUTPUT
          echo "Version file was not modified in this commit"
        fi
    
    - name: Get previous version
      id: previous-version
      if: steps.version-file-check.outputs.version-file-changed == 'true'
      run: |
        # Get the version from the previous commit by extracting it from git show
        PREV_VERSION=$(git show HEAD~1:src/code_indexer/__init__.py 2>/dev/null | grep -E '^__version__' | sed -E 's/__version__ = "(.*)"/\1/' || echo "none")
        echo "previous=$PREV_VERSION" >> $GITHUB_OUTPUT
        echo "Previous version: $PREV_VERSION"
    
    - name: Check if version changed
      id: version-check
      run: |
        CURRENT="${{ steps.current-version.outputs.version }}"
        VERSION_FILE_CHANGED="${{ steps.version-file-check.outputs.version-file-changed }}"
        
        if [ "$VERSION_FILE_CHANGED" = "true" ]; then
          PREVIOUS="${{ steps.previous-version.outputs.previous }}"
          if [ "$CURRENT" != "$PREVIOUS" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS to $CURRENT"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version file changed but version is the same: $CURRENT"
          fi
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "Version file not modified in this commit: $CURRENT"
        fi
        echo "version=$CURRENT" >> $GITHUB_OUTPUT

  build-and-release:
    needs: [test, check-version]
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Get built files
      run: ls -la dist/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.current-version }}
        name: Release v${{ needs.check-version.outputs.current-version }}
        body: |
          🚀 **Automatic release for version ${{ needs.check-version.outputs.current-version }}**
          
          This release was automatically created when the version number changed.
          
          ## Installation
          
          ```bash
          # Install from source
          pip install https://github.com/${{ github.repository }}/archive/v${{ needs.check-version.outputs.current-version }}.tar.gz
          
          # Or download and install wheel
          pip install code_indexer-${{ needs.check-version.outputs.current-version }}-py3-none-any.whl
          ```
        files: |
          dist/code_indexer-${{ needs.check-version.outputs.current-version }}-py3-none-any.whl
          dist/code_indexer-${{ needs.check-version.outputs.current-version }}.tar.gz
        draft: false
        prerelease: false