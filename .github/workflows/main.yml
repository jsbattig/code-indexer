name: CI/CD with Auto Release

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with ruff
      run: |
        ruff check src/ tests/
    
    - name: Check formatting with black
      run: |
        black --check src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Run unit tests only (no E2E/integration tests)
      run: |
        # Run only unit tests that don't require external services
        # Exclude E2E, integration, service-dependent, Docker, and Claude tests
        pytest tests/ \
          --ignore=tests/test_e2e_embedding_providers.py \
          --ignore=tests/test_start_stop_e2e.py \
          --ignore=tests/test_end_to_end_complete.py \
          --ignore=tests/test_end_to_end_dual_engine.py \
          --ignore=tests/test_integration_multiproject.py \
          --ignore=tests/test_docker_manager.py \
          --ignore=tests/test_docker_manager_cleanup.py \
          --ignore=tests/test_docker_manager_simple.py \
          --ignore=tests/test_clean_command.py \
          --ignore=tests/test_health_checker.py \
          --ignore=tests/test_cleanup_validation.py \
          --ignore=tests/test_data_cleaner_health.py \
          --ignore=tests/test_timeout_config.py \
          --ignore=tests/test_service_readiness.py \
          --ignore=tests/test_claude_e2e.py \
          --ignore=tests/test_reconcile_e2e.py \
          --ignore=tests/test_voyage_ai_e2e.py \
          --ignore=tests/test_cow_workflow_e2e.py \
          --ignore=tests/test_docker_compose_validation.py \
          --ignore=tests/test_idempotent_setup.py \
          --ignore=tests/test_idempotent_start.py \
          --ignore=tests/test_branch_topology_e2e.py \
          --ignore=tests/test_schema_migration_e2e.py \
          --ignore=tests/test_optimized_example.py \
          --ignore=tests/test_comprehensive_git_workflow.py \
          --ignore=tests/test_claude_plan_e2e.py \
          --ignore=tests/test_dry_run_claude_prompt.py \
          --ignore=tests/test_dry_run_integration.py \
          --ignore=tests/test_rag_first_claude_service_bug.py \
          --ignore=tests/test_claude_response_formatting_regression.py \
          --ignore=tests/test_real_claude_response_formatting.py \
          --ignore=tests/test_claude_result_formatting.py \
          --ignore=tests/test_git_aware_watch_e2e.py \
          --ignore=tests/test_indexing_consistency_e2e.py \
          --ignore=tests/test_timestamp_comparison_e2e.py \
          --ignore=tests/test_concurrent_indexing_prevention.py \
          --ignore=tests/test_resume_and_incremental_bugs.py \
          --ignore=tests/test_actual_file_chunking.py \
          --ignore=tests/test_reproduce_tiny_chunks.py \
          --ignore=tests/test_chunker_docstring_fix.py \
          --ignore=tests/test_prompt_formatting_issues.py \
          --ignore=tests/test_parallel_voyage_performance.py \
          --ignore=tests/test_branch_transition_logic_fix.py \
          --ignore=tests/test_compare_search_methods.py \
          --ignore=tests/test_debug_branch_isolation.py \
          --ignore=tests/test_search_with_branch_topology_fix.py \
          --ignore=tests/test_cow_clone_e2e_full_automation.py \
          --ignore=tests/test_cow_clone_e2e.py \
          --ignore=tests/test_docker_uninstall_complete_cleanup_e2e.py \
          --ignore=tests/test_cli_progress_e2e.py \
          --ignore=tests/test_deletion_handling_e2e.py \
          --ignore=tests/test_git_indexing_consistency_e2e.py \
          --ignore=tests/test_kotlin_semantic_search_e2e.py \
          --ignore=tests/test_reconcile_branch_visibility_bug_e2e.py \
          --ignore=tests/test_reconcile_branch_visibility_e2e.py \
          --ignore=tests/test_reconcile_comprehensive_e2e.py \
          --ignore=tests/test_watch_timestamp_update_e2e.py \
          --ignore=tests/test_working_directory_reconcile_e2e.py \
          --ignore=tests/test_git_pull_incremental_e2e.py \
          --ignore=tests/test_override_cli_integration.py \
          --ignore=tests/test_setup_global_registry_e2e.py \
          --ignore=tests/test_cli_init_segment_size.py \
          --ignore=tests/test_cow_migration_e2e_full_automation.py \
          --ignore=tests/test_line_number_display_e2e.py \
          --ignore=tests/test_semantic_chunking_ast_fallback_e2e.py \
          --ignore=tests/test_semantic_query_display_e2e.py \
          --ignore=tests/test_semantic_search_capabilities_e2e.py \
          --ignore=tests/test_cidx_prompt_generator.py \
          --ignore=tests/test_enhanced_cancellation_system.py \
          --ignore=tests/test_cli_flag_validation.py \
          --ignore=tests/test_config_discovery_path_walking.py \
          --ignore=tests/test_fix_config_port_bug_specific.py \
          --ignore=tests/test_fix_config_port_regeneration.py \
          --ignore=tests/test_per_project_containers.py \
          --ignore=tests/test_progress_percentage_fix.py \
          --ignore=tests/test_real_world_path_walking.py \
          -m "not slow and not e2e and not real_api" \
          --cov=src/code_indexer --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  check-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      current-version: ${{ steps.version-check.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for comparison
    
    - name: Get current version
      id: current-version
      run: |
        VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from code_indexer import __version__; print(__version__)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Check if version file changed
      id: version-file-check
      run: |
        # Check if __init__.py was modified in this commit
        if git diff --name-only HEAD~1 HEAD | grep -q "src/code_indexer/__init__.py"; then
          echo "version-file-changed=true" >> $GITHUB_OUTPUT
          echo "Version file was modified in this commit"
        else
          echo "version-file-changed=false" >> $GITHUB_OUTPUT
          echo "Version file was not modified in this commit"
        fi
    
    - name: Get previous version
      id: previous-version
      if: steps.version-file-check.outputs.version-file-changed == 'true'
      run: |
        # Get the version from the previous commit by extracting it from git show
        PREV_VERSION=$(git show HEAD~1:src/code_indexer/__init__.py 2>/dev/null | grep -E '^__version__' | sed -E 's/__version__ = "(.*)"/\1/' || echo "none")
        echo "previous=$PREV_VERSION" >> $GITHUB_OUTPUT
        echo "Previous version: $PREV_VERSION"
    
    - name: Check if version changed
      id: version-check
      run: |
        CURRENT="${{ steps.current-version.outputs.version }}"
        VERSION_FILE_CHANGED="${{ steps.version-file-check.outputs.version-file-changed }}"
        
        if [ "$VERSION_FILE_CHANGED" = "true" ]; then
          PREVIOUS="${{ steps.previous-version.outputs.previous }}"
          if [ "$CURRENT" != "$PREVIOUS" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS to $CURRENT"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version file changed but version is the same: $CURRENT"
          fi
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "Version file not modified in this commit: $CURRENT"
        fi
        echo "version=$CURRENT" >> $GITHUB_OUTPUT

  build-and-release:
    needs: [test, check-version]
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Get built files
      run: ls -la dist/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.check-version.outputs.current-version }}
        name: Release v${{ needs.check-version.outputs.current-version }}
        body: |
          ðŸš€ **Automatic release for version ${{ needs.check-version.outputs.current-version }}**
          
          This release was automatically created when the version number changed.
          
          ## Installation
          
          ```bash
          # Install from source
          pip install https://github.com/${{ github.repository }}/archive/v${{ needs.check-version.outputs.current-version }}.tar.gz
          
          # Or download and install wheel
          pip install code_indexer-${{ needs.check-version.outputs.current-version }}-py3-none-any.whl
          ```
        files: |
          dist/code_indexer-${{ needs.check-version.outputs.current-version }}-py3-none-any.whl
          dist/code_indexer-${{ needs.check-version.outputs.current-version }}.tar.gz
        draft: false
        prerelease: false